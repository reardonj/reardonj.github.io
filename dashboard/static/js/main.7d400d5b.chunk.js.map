{"version":3,"sources":["features/weather/IconMappings.ts","features/weather/WeatherSlice.ts","model/Hooks.ts","components/AppToasts.ts","components/Header.tsx","features/weather/Components.tsx","App.tsx","serviceWorker.ts","model/Store.ts","index.tsx"],"names":["idToCondition","0","1","2","3","4","6","7","8","9","10","11","12","13","14","15","16","17","18","19","23","24","25","26","27","28","30","31","32","33","34","36","37","38","39","40","41","42","43","44","45","46","47","48","conditionForId","id","ParseError","message","Error","getChild","element","child","optional","curr","rest","length","slice","first","getElementsByTagName","tagName","parseAttribute","attribute","text","getAttribute","parseStringElement","textContent","parseNumberElement","number","Number","isNaN","parseDate","dateTime","DateTime","utc","parseForecast","forecast","abbreviated","title","icon","fullReport","conditions","temperature","windChill","humidex","parseCurrentConditions","current","dateElement","Array","from","find","x","time","toSeconds","parseHourlyForecastGroup","forecasts","map","dateString","fromFormat","zone","FixedOffsetZone","utcInstance","pop","parseWeather","xml","reportTimeNodes","evaluate","undefined","XPathResult","FIRST_ORDERED_NODE_TYPE","singleNodeValue","Element","hourlyForecasts","fetchWeather","createAsyncThunk","a","axios","response","DOMParser","parseFromString","data","weatherSlice","createSlice","name","initialState","state","reducers","loadWeather","action","isFetching","extraReducers","builder","addCase","pending","fulfilled","payload","error","rejected","actions","useAppDispatch","useDispatch","useAppSelector","useSelector","AppToasts","Toaster","create","className","position","Position","BOTTOM","Header","Group","align","Alignment","LEFT","Heading","RIGHT","LoadingIndicator","LoadingButton","updateRelativeTime","update","fromSeconds","toRelative","dispatcher","forecastTime","useState","relativeUpdateTime","setRelativeUpdateTime","now","toUTC","lastUpdate","setLastUpdate","useEffect","interval","setInterval","diffNow","minutes","clearInterval","indicator","forecastState","show","intent","loading","onClick","CurrentConditionsReport","Classes","TEXT_MUTED","TEXT_SMALL","UI_TEXT","join","toLocal","toLocaleString","TIME_24_SIMPLE","ellipsize","renderTemperature","AstronomicalReport","DailyForecasts","elements","flatMap","renderForecast","HourlyForecasts","renderHourlyForecast","temp","modifiedTemp","toFixed","report","content","ToolTipClasses","TOOLTIP2_INDICATOR","endsWith","date","day","warningClass","to24hTime","style","today","Date","fromJSDate","getSunrise","getSunset","App","mode","useModeSelector","dark","DARK","light","unset","Boolean","window","location","hostname","match","store","configureStore","reducer","Weather","dispatch","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console"],"mappings":"2SAAMA,EAAwC,CAC5CC,EAAG,eACHC,EAAG,wBACHC,EAAG,gBACHC,EAAG,qBACHC,EAAG,qBACHC,EAAG,iBACHC,EAAG,kBACHC,EAAG,cACHC,EAAG,uBACHC,GAAI,YACJC,GAAI,UACJC,GAAI,aACJC,GAAI,UACJC,GAAI,WACJC,GAAI,cACJC,GAAI,UACJC,GAAI,UACJC,GAAI,UACJC,GAAI,kBACJC,GAAI,UACJC,GAAI,SACJC,GAAI,eACJC,GAAI,UACJC,GAAI,UACJC,GAAI,cACJC,GAAI,iBACJC,GAAI,6BACJC,GAAI,sBACJC,GAAI,2BACJC,GAAI,2BACJC,GAAI,uBACJC,GAAI,wBACJC,GAAI,oBACJC,GAAI,4BACJC,GAAI,yBACJC,GAAI,aACJC,GAAI,aACJC,GAAI,iBACJC,GAAI,WACJC,GAAI,UACJC,GAAI,UACJC,GAAI,kBACJC,GAAI,cAGC,SAASC,EAAeC,GAC7B,GAAIA,KAAM7C,EACR,MAAO,MAAQA,EAAc6C,G,ICT3BC,E,kDACJ,WAAmBC,GAAkB,uCAC7BA,G,sBAFeC,QAUzB,SAASC,EAASC,EAAkBC,EAA0BC,GAAqB,IAAD,EAC5EC,EACAC,EACJ,GAAuB,kBAAXH,EACVE,EAAOF,EACPG,EAAO,OACF,IAAqB,IAAjBH,EAAMI,OACf,OAAOL,EAEPG,EAAOF,EAAM,GACbG,EAAOH,EAAMK,MAAM,GAGrB,IAAMC,EAAK,UAAGP,EAAQQ,qBAAqBL,UAAhC,aAAG,EAAqC,GACnD,IAAKI,IAAUL,EACb,MAAM,IAAIN,EAAJ,UAAkBI,EAAQS,QAA1B,4BAAqDR,IAG7D,OAAIG,EAAKC,OAAS,EACTN,EAASQ,EAAOH,EAAMF,GAEtBK,EAIX,SAASG,EAAeV,EAAkBW,GACxC,IAAMC,EAAOZ,EAAQa,aAAaF,GAClC,IAAKC,EACH,MAAM,IAAIhB,EAAJ,UAAkBI,EAAQS,QAA1B,8BAAuDE,IAG/D,OAAOC,EAKT,SAASE,EAAmBd,EAAyBE,GACnD,IAAMU,EAAI,OAAGZ,QAAH,IAAGA,OAAH,EAAGA,EAASe,YACtB,IAAKH,IAASV,EACZ,MAAM,IAAIN,EAAW,kCAGvB,OAAOgB,EAKT,SAASI,EAAmBhB,EAAyBE,GACnD,IAAMU,EAAOE,EAAmBd,EAASE,GACzC,IAAKU,GAAQV,EACX,OAAO,KAGT,IAAMe,EAASC,OAAON,GACtB,GAAIO,MAAMF,GACR,MAAM,IAAIrB,EAAJ,UAAkBI,EAASS,QAA3B,+BAGR,OAAOQ,EAGT,SAASG,EAAUC,GACjB,OAAOC,WAASC,IACdP,EAAmBjB,EAASsB,EAAU,SACtCL,EAAmBjB,EAASsB,EAAU,UACtCL,EAAmBjB,EAASsB,EAAU,QACtCL,EAAmBjB,EAASsB,EAAU,SACtCL,EAAmBjB,EAASsB,EAAU,YAG1C,SAASG,EAAcC,GACrB,IAAMC,EAAc3B,EAAS0B,EAAU,uBACvC,MAAO,CACLE,MAAOjB,EAAeX,EAAS0B,EAAU,UAAW,oBACpDG,KAAMlC,EAAesB,EAAmBjB,EAAS2B,EAAa,cAC9DG,WAAYf,EAAmBf,EAAS0B,EAAU,gBAClDK,WAAYhB,EAAmBf,EAAS2B,EAAa,gBACrDK,YAAaf,EAAmBjB,EAAS0B,EAAU,CAAC,eAAgB,iBACpEO,UAAW,KACXC,QAAS,MAIb,SAASC,EAAuBC,GAC9B,IAAIC,EAAcC,MAAMC,KAAKH,EAAQ3B,qBAAqB,aAAa+B,MAAK,SAAAC,GAAC,MAA+B,QAA3BA,EAAE3B,aAAa,WAChG,IAAKuB,EACH,MAAM,IAAIxC,EAAW,0CAGvB,MAAO,CACL6C,KAAMrB,EAAUgB,GAAaM,YAC7BZ,WAAYhB,EAAmBf,EAASoC,EAAS,cACjDJ,YAAaf,EAAmBjB,EAASoC,EAAS,gBAClDP,KAAMlC,EAAesB,EAAmBjB,EAASoC,EAAS,cAC1DH,UAAWhB,EAAmBjB,EAASoC,EAAS,aAAa,IAAO,GACpEF,QAASjB,EAAmBjB,EAASoC,EAAS,WAAW,IAAO,IAQpE,SAASQ,EAAyBC,GAChC,OAAOP,MAAMC,KAAKM,EAAUpC,qBAAqB,mBAAmBqC,KAAI,SAAAV,GACtE,IAAMW,EAAapC,EAAeyB,EAAS,eAE3C,MAAO,CACLM,KAFWnB,WAASyB,WAAWD,EAAY,eAAgB,CAAEE,KAAMC,kBAAgBC,cAExER,YACXZ,WAAYhB,EAAmBf,EAASoC,EAAS,cACjDJ,YAAaf,EAAmBjB,EAASoC,EAAS,gBAClDP,KAAMlC,EAAesB,EAAmBjB,EAASoC,EAAS,cAC1DH,UAAWhB,EAAmBjB,EAASoC,EAAS,aAAa,IAAO,GACpEF,QAASjB,EAAmBjB,EAASoC,EAAS,WAAW,IAAO,GAChEgB,KAAMnC,EAAmBjB,EAASoC,EAAS,OAAO,IAAO,IAAS,GAAK,QAK7E,SAASiB,EAAaC,GACpB,IArB0BT,EAqBpBU,EAAkBD,EAAIE,SAC1B,0DACAF,OACAG,EACAC,YAAYC,yBACd,KAAMJ,EAAgBK,2BAA2BC,SAC/C,MAAM,IAAIhE,EAAW,yBAEvB,MAAO,CACL6C,KAAMrB,EAAUkC,EAAgBK,iBAAiBjB,YACjDP,QAASD,EAAuBmB,EAAI7C,qBAAqB,qBAAqB,IAC9EoC,WAhCwBA,EAgCMS,EAAI7C,qBAAqB,iBAAiB,GA/BnE6B,MAAMC,KAAKM,EAAUpC,qBAAqB,aAAaqC,IAAIrB,IAgChEqC,gBAAiBlB,EAAyBU,EAAI7C,qBAAqB,uBAAuB,KAKvF,IAAMsD,EAAeC,YAAiB,uBAAD,sBAAyB,8BAAAC,EAAA,sEAC5CC,IAAM,4FADsC,cAC7DC,EAD6D,OAE7Db,GAAM,IAAIc,WAAYC,gBAAgBF,EAASG,KAAM,YAFQ,2BAI1DjB,EAAaC,IAJ6C,qCAO7D,gBAAazD,GAPgD,0CAQxD,KAAEC,SARsD,6EAe/DyE,EAAeC,YAAY,CAC/BC,KAAM,UACNC,aA9JiC,CAAEC,MAAO,UAAWL,KAAM,MA+J3DM,SAAU,CACRC,YADQ,SACIF,EAAOG,GACjB,OAAO,2BACFH,GADL,IAEEI,YAAY,MAIlBC,cAAe,SAACC,GACdA,EACGC,QAAQnB,EAAaoB,SAAS,SAACR,EAAOG,GACrCH,EAAMA,MAAQ,cAEfO,QAAQnB,EAAaqB,WAAW,SAACT,EAAOG,GACvCH,EAAMA,MAAQ,UAEkB,kBAApBG,EAAOO,QACjBV,EAAMA,MAAQ,CAAEW,MAAOR,EAAOO,UAE9BV,EAAMA,MAAQ,UACdA,EAAML,KAAOQ,EAAOO,YAGvBH,QAAQnB,EAAawB,UAAU,SAACZ,EAAOG,GACtCH,EAAMA,MAAQ,CAAEW,MAAOR,EAAOQ,MAAMxF,SAAW,0BAOxCyE,GAFgBA,EAAaiB,QAA7BX,YAEAN,G,QCvOFkB,EAAiB,kBAAMC,eACvBC,EAAkDC,I,QCHlDC,EAAYC,IAAQC,OAAO,CACtCC,UAAW,iBACXC,SAAUC,IAASC,S,OCGd,SAASC,IACd,OACE,eAAC,IAAD,WACE,cAAC,IAAOC,MAAR,CAAcC,MAAOC,IAAUC,KAA/B,SACE,cAAC,IAAOC,QAAR,+BAEF,eAAC,IAAOJ,MAAR,CAAcC,MAAOC,IAAUG,MAA/B,UACE,cAACC,EAAD,IACA,cAACC,EAAD,UAMR,SAASC,EAAmBC,EAA6BpE,GACvD,OAAOoE,EAAOpE,EAAO,SAAWnB,WAASwF,YAAYrE,GAAMsE,aAAe,IAG5E,SAASL,IACP,IAAMM,EAAaxB,IACbyB,EAAevB,GAAe,SAAAhB,GAAK,uBAAIA,EAAMjD,SAAS4C,YAAnB,aAAI,EAAqB5B,QAFxC,EAG0ByE,mBAAS,IAHnC,mBAGnBC,EAHmB,KAGCC,EAHD,OAIUF,mBAAS5F,WAAS+F,MAAMC,SAJlC,mBAInBC,EAJmB,KAIPC,EAJO,KAwB1B,OAjBAC,qBAAU,WACR,IAAMC,EAAWC,aAAY,WAC3Bf,EAAmBQ,EAAuBH,GAEtCM,EAAWK,QAAQ,WAAWC,SAAW,KAC3CL,EAAclG,WAAS+F,MAAMC,SAC7BN,EAAWlD,QAGZ,KACH,OAAO,kBAAMgE,cAAcJ,OAG7BD,qBAAU,WACRb,EAAmBQ,EAAuBH,KACzC,CAACG,EAAuBH,IAEpB,8BAAME,IAIf,SAASR,IACP,IAaIoB,EAbEf,EAAaxB,IACbwC,EAAgBtC,GAAe,SAAAhB,GAAK,OAAIA,EAAMjD,SAASiD,SAkB7D,OAhBA+C,qBAAU,WACR,GAA+B,kBAAnBO,EAA6B,CACvC,IAAMnI,EAAU,gCACd,wDAA8B,uBAC7BmI,EAAc3C,SAEjBO,EAAUqC,KAAK,CAAEpI,UAAS+B,KAAM,QAASsG,OAAQ,eAElD,CAACF,IAIFD,EAD6B,kBAAnBC,EACE,cAAC,IAAD,CAAMpG,KAAK,YAEX,cAAC,IAAD,CAAMA,KAAK,aAElB,cAAC,IAAD,CACLuG,QAA2B,aAAlBH,EACTI,QAAS,kBAAMpB,EAAWlD,MAC1BoE,OAAmC,kBAAnBF,EAA8B,UAAY,UAHrD,SAKJD,I,4BCtEE,SAASM,IACd,IAAMvG,EAAa4D,GAAe,SAAAhB,GAAK,uBAAIA,EAAMjD,SAAS4C,YAAnB,aAAI,EAAqBlC,WAEhE,OACE,eAAC,IAAD,WACE,sBAAK4D,UAAU,cAAf,UACE,gCACE,eAAC,IAAD,6BACA,sBAAMA,UAAW,CAACuC,IAAQC,WAAYD,IAAQE,WAAYF,IAAQG,SAASC,KAAK,KAAhF,SACK5G,EACG,+CAAUR,WAASwF,YAAYhF,EAAWW,MAAMkG,UAAUC,eAAetH,WAASuH,mBAClF,yDAGR,qBAAK9C,UAAU,qBAAf,SAAoC,cAAC,IAAD,CAAM+C,WAAW,EAAjB,gBAAwBhH,QAAxB,IAAwBA,OAAxB,EAAwBA,EAAYA,kBAEzEA,EACG,qCACA,qBAAKiE,UAAU,WACdgD,GAAkBjH,EAAWC,YAAaD,EAAWG,QAASH,EAAWE,WAC1E,qBAAK+D,UAAU,eAAf,SAA8B,mBAAGA,UAAW,UAAYjE,EAAWF,MAAQ,mBAE3E,gCAGN,cAACoH,GAAD,OAKC,SAASC,IAAkB,IAAD,EACzBrG,EAAY8C,GAAe,SAAAhB,GAAK,uBAAIA,EAAMjD,SAAS4C,YAAnB,aAAI,EAAqBzB,aACzDsG,EAAQ,iBAAGtG,QAAH,IAAGA,OAAH,EAAGA,EAAWuG,QAAQC,WAAtB,QAAyC,qBAAKrD,UAAWuC,IAAQC,WAAxB,yBACvD,OAAO,eAAC,IAAD,WACL,cAAC,IAAD,uBACCW,KAIE,SAASG,IAAmB,IAAD,EAC1BzG,EAAY8C,GAAe,SAAAhB,GAAK,uBAAIA,EAAMjD,SAAS4C,YAAnB,aAAI,EAAqBR,mBACzDqF,EAAQ,iBAAGtG,QAAH,IAAGA,OAAH,EAAGA,EAAWC,IAAIyG,WAAlB,QAA2C,qBAAKvD,UAAWuC,IAAQC,WAAxB,yBACzD,OAAO,eAAC,IAAD,WACL,cAAC,IAAD,8BACA,qBAAKxC,UAAU,kBAAf,SACGmD,OAKP,SAASH,GAAkBQ,EAActH,EAAwBD,GAC/D,IAAMwH,EAAevH,GAAWD,EAChC,OAAIwH,EACK,sBAAKzD,UAAU,cAAf,oBACDyD,EAAaC,QAAQ,GADpB,aACiC,sBAAM1D,UAAWuC,IAAQC,WAAzB,oBAA0CgB,EAAKE,QAAQ,GAAvD,eAGjC,qBAAK1D,UAAU,cAAf,mBAAiCwD,EAAKE,QAAQ,GAA9C,WAIX,SAASL,GAAe3H,GACtB,IAAMiI,EAAS,sBAAK3D,UAAU,uBAAf,UACb,gCACE,cAAC,IAAD,UAAKtE,EAASE,QACd,cAAC,IAAD,CAAUgI,QAASlI,EAASI,WAAYmE,SAAS,MAAMD,UAAW6D,IAAeC,mBAAjF,SACE,cAAC,IAAD,CAAMf,WAAW,EAAjB,SAAwBrH,EAASK,kBAGrC,qBAAKiE,UAAU,WACdgD,GAAkBtH,EAASM,YAAaN,EAASQ,QAASR,EAASO,WACpE,qBAAK+D,UAAU,eAAf,SAA8B,mBAAGA,UAAW,UAAYtE,EAASG,MAAQ,kBATjBH,EAASE,OAYnE,OAAIF,EAASE,MAAMmI,SAAS,SACnB,CAACJ,EAAQ,cAAC,IAAD,GAAcjI,EAASE,MAAQ,aAG1C,CAAC+H,GAIV,SAASJ,GAAqB7H,GAC5B,IAAMgB,EAAOnB,WAASwF,YAAYrF,EAASgB,KAAM,CAAEO,KAAMC,kBAAgBC,cAAeyF,UAClFoB,EAAOtH,EAAKuH,MAAQ1I,WAAS+F,MAAM2C,IAAM,QAAU,WACzD,OAAO,sBAAKjE,UAAW,CAAC,cAAe,WAAYgE,GAAMrB,KAAK,KAAvD,UACL,qBAAK3C,UAAU,aAAf,SACE,cAAC,IAAD,CAAIA,UAAWkE,GAAaxI,GAA5B,SAAwCyI,GAAUzH,OAEpD,8BAAK,mBAAGsD,UAAW,UAAYtE,EAASG,MAAQ,gBAChD,sBAAKmE,UAAU,cAAf,qBAAkCtE,EAASQ,SAAWR,EAASO,WAAaP,EAASM,aAAa0H,QAAQ,GAA1G,SACIhI,EAASQ,SAAWR,EAASO,UAC3B,sBAAM+D,UAAU,cAAhB,mBAAkCtE,EAASM,YAAY0H,QAAQ,GAA/D,WACA,gCAGN,8BACGhI,EAAS0B,IAAM,EAAI1B,EAAS0B,IAAIyF,oBAAepF,EAAW,CAAE2G,MAAO,YAAe,KAErF,cAAC,IAAD,CAAMrB,WAAW,EAAjB,SACE,cAAC,IAAD,CAAUa,QAASlI,EAASK,WAAYkE,SAAS,MAAMD,UAAW6D,IAAeC,mBAAjF,SACGpI,EAASK,eAGd,qBAAKiE,UAAU,aAnBwDtE,EAASgB,MAuBpF,SAASuG,KACP,IAAMoB,EAAQ,IAAIC,KAClB,OAAO,sBAAKtE,UAAU,cAAf,UACL,cAAC,IAAD,6BACA,qBAAKA,UAAU,WACf,gCACE,mBAAGA,UAAW,kBADhB,IACqCmE,GAAU5I,WAASgJ,WAAWC,qBAAW,OAAQ,MAAOH,QAE7F,gCACE,mBAAGrE,UAAW,iBADhB,IACoCmE,GAAU5I,WAASgJ,WAAWE,oBAAU,OAAQ,MAAOJ,WAK/F,SAASF,GAAUzH,GACjB,OAAOA,EAAKkG,UAAUC,eAAetH,WAASuH,gBAGhD,SAASoB,GAAaxI,GACpB,OAAIA,EAAS0B,KAAO,GACX,UAGF,G,WCnIIsH,GAAM,WACjB,IAAMC,EAAOC,0BAAgB,CAAEC,KAAMtC,IAAQuC,KAAMC,MAAO,GAAIC,MAAO,KACrE,OACE,sBAAKhF,UAAW2E,EAAM/K,GAAG,cAAzB,UACE,cAAEwG,EAAF,IACA,8BACE,sBAAKJ,UAAU,YAAf,UACE,cAACsC,EAAD,IACA,cAACgB,EAAD,IACA,cAACJ,EAAD,SAGJ,cAAC,IAAD,IACA,wBAAQlD,UAAWuC,IAAQC,WAA3B,+HCTcyC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCfC,IAAMC,GAAQC,YAAe,CAClCC,QAAS,CACP9J,SAAU+J,EAAQD,W,4BCUtBF,GAAMI,SAAS3H,KACf6D,aAAY,kBAAM0D,GAAMI,SAAS3H,OAAiB,MAElD4H,IAASC,OACP,cAAC,aAAD,UACE,cAAC,IAAD,CAAUN,MAAOA,GAAjB,SACE,cAAC,GAAD,QAGJO,SAASC,eAAe,SFgHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAACC,GACLA,EAAaC,gBAEdC,OAAM,SAAC/G,GACNgH,QAAQhH,MAAMA,EAAMxF,c","file":"static/js/main.7d400d5b.chunk.js","sourcesContent":["const idToCondition: Record<number, string> = {\n  0: 'wi-day-sunny', // sunny\n  1: 'wi-day-sunny-overcast', // mainly sunny\n  2: 'wi-day-cloudy', // partly cloudy\n  3: 'wi-day-cloudy-high', // mostly cloudy\n  4: 'wi-day-cloudy-high', // increasingly cloudy\n  6: 'wi-day-showers', // light rain shower\n  7: 'wi-day-rain-mix', // light rain shower and flurries\n  8: 'wi-day-snow', // light flurries\n  9: 'wi-day-storm-showers', // thunder showers\n  10: 'wi-cloudy', // cloudy\n  11: 'wi-rain', // precipitation\n  12: 'wi-showers', // rain showers\n  13: 'wi-rain', // rain\n  14: 'wi-sleet', // freezing rain\n  15: 'wi-rain-mix', // snow & rain\n  16: 'wi-snow', // light snow\n  17: 'wi-snow', // snow\n  18: 'wi-snow', // heavy snow\n  19: 'wi-thunderstorm', // thunderstorms\n  23: 'wi-dust', // haze\n  24: 'wi-fog', // fog\n  25: 'wi-snow-wind', // drifting snow\n  26: 'wi-hail', // ice crystals\n  27: 'wi-hail', // hail\n  28: 'wi-sprinkle', // drizzle\n  30: 'wi-night-clear', // clear (night)\n  31: 'wi-night-alt-partly-cloudy', // mostly clear\n  32: 'wi-night-alt-cloudy', // cloudy\n  33: 'wi-night-alt-cloudy-high', // mostly cloudy\n  34: 'wi-night-alt-cloudy-high', // increasingly cloudy\n  36: 'wi-night-alt-showers', // rain showers\n  37: 'wi-night-alt-rain-mix', // rain-snow mix\n  38: 'wi-night-alt-snow', // light flurries\n  39: 'wi-night-alt-thunderstorm', // thunderstorm\n  40: 'wi-night-alt-snow-wind', // blowing snow\n  41: 'wi-tornado', // funnel cloud\n  42: 'wi-tornado', // tornado\n  43: 'wi-strong-wind', // windy\n  44: 'wi-smoke', // smoke\n  45: 'wi-dust', // dust\n  46: 'wi-hail', // thunderstorm with hail\n  47: 'wi-thunderstorm', // thunderstorm with dust\n  48: 'wi-tornado' // waterspout\n}\n\nexport function conditionForId(id: number): string | undefined {\n  if (id in idToCondition) {\n    return 'wi ' + idToCondition[id];\n  }\n\n  return undefined;\n}","import { createSlice, createAsyncThunk } from '@reduxjs/toolkit'\nimport axios from 'axios';\nimport { DateTime, FixedOffsetZone } from 'luxon';\nimport { conditionForId } from './IconMappings';\n\nexport interface ConditionReport {\n  conditions: string;\n  icon: string | undefined;\n  temperature: number;\n  windChill: number | null;\n  humidex: number | null;\n}\n\nexport interface CurrentConditions extends ConditionReport {\n  time: number;\n}\n\nexport interface HourlyForecast extends ConditionReport {\n  time: number;\n  pop: number;\n}\n\nexport interface Forecast extends ConditionReport {\n  title: string;\n  fullReport: string\n}\n\nexport interface WeatherReport {\n  time: number;\n  current: CurrentConditions;\n  forecasts: Forecast[]\n  hourlyForecasts: HourlyForecast[]\n}\n\nexport interface WeatherState {\n  state: \"fetching\" | \"fetched\" | { error: string };\n  data: WeatherReport | null;\n}\n\nclass ParseError extends Error {\n  public constructor(message: string) {\n    super(message);\n  }\n}\n\nconst initialState: WeatherState = { state: \"fetched\", data: null };\n\nfunction getChild(element: Element, child: string | string[]): Element;\nfunction getChild(element: Element, child: string | string[], optional?: boolean): Element | null;\nfunction getChild(element: Element, child: string | string[], optional?: boolean) {\n  let curr: string;\n  let rest: string[]\n  if (typeof (child) === 'string') {\n    curr = child;\n    rest = [];\n  } else if (child.length === 0) {\n    return element;\n  } else {\n    curr = child[0];\n    rest = child.slice(1);\n  }\n\n  const first = element.getElementsByTagName(curr)?.[0];\n  if (!first && !optional) {\n    throw new ParseError(`${element.tagName} missing element ${child}`);\n  }\n\n  if (rest.length > 0) {\n    return getChild(first, rest, optional);\n  } else {\n    return first;\n  }\n}\n\nfunction parseAttribute(element: Element, attribute: string) {\n  const text = element.getAttribute(attribute);\n  if (!text) {\n    throw new ParseError(`${element.tagName} missing attribute ${attribute}`);\n  }\n\n  return text;\n}\n\nfunction parseStringElement(element: Element): string;\nfunction parseStringElement(element: Element | null, optional?: boolean): string | null;\nfunction parseStringElement(element: Element | null, optional?: boolean) {\n  const text = element?.textContent;\n  if (!text && !optional) {\n    throw new ParseError('Element or content was missing');\n  }\n\n  return text;\n}\n\nfunction parseNumberElement(element: Element): number;\nfunction parseNumberElement(element: Element | null, optional: boolean): number | null;\nfunction parseNumberElement(element: Element | null, optional?: boolean) {\n  const text = parseStringElement(element, optional);\n  if (!text && optional) {\n    return null;\n  }\n\n  const number = Number(text);\n  if (isNaN(number)) {\n    throw new ParseError(`${element!.tagName} does not contain a number`);\n  }\n\n  return number;\n}\n\nfunction parseDate(dateTime: Element): DateTime {\n  return DateTime.utc(\n    parseNumberElement(getChild(dateTime, 'year')),\n    parseNumberElement(getChild(dateTime, 'month')),\n    parseNumberElement(getChild(dateTime, 'day')),\n    parseNumberElement(getChild(dateTime, 'hour')),\n    parseNumberElement(getChild(dateTime, 'minute')));\n}\n\nfunction parseForecast(forecast: Element) {\n  const abbreviated = getChild(forecast, 'abbreviatedForecast');\n  return {\n    title: parseAttribute(getChild(forecast, 'period'), 'textForecastName'),\n    icon: conditionForId(parseNumberElement(getChild(abbreviated, 'iconCode'))),\n    fullReport: parseStringElement(getChild(forecast, 'textSummary')),\n    conditions: parseStringElement(getChild(abbreviated, 'textSummary')),\n    temperature: parseNumberElement(getChild(forecast, ['temperatures', 'temperature'])),\n    windChill: null,\n    humidex: null\n  }\n}\n\nfunction parseCurrentConditions(current: Element): CurrentConditions {\n  var dateElement = Array.from(current.getElementsByTagName('dateTime')).find(x => x.getAttribute('zone') === 'UTC');\n  if (!dateElement) {\n    throw new ParseError(\"currentConditions missing UTC dateTime\");\n  }\n\n  return {\n    time: parseDate(dateElement).toSeconds(),\n    conditions: parseStringElement(getChild(current, 'condition')),\n    temperature: parseNumberElement(getChild(current, 'temperature')),\n    icon: conditionForId(parseNumberElement(getChild(current, 'iconCode'))),\n    windChill: parseNumberElement(getChild(current, 'windChill', true), true),\n    humidex: parseNumberElement(getChild(current, 'humidex', true), true)\n  };\n}\n\nfunction parseForecastGroup(forecasts: Element): Forecast[] {\n  return Array.from(forecasts.getElementsByTagName('forecast')).map(parseForecast);\n}\n\nfunction parseHourlyForecastGroup(forecasts: Element): HourlyForecast[] {\n  return Array.from(forecasts.getElementsByTagName('hourlyForecast')).map(current => {\n    const dateString = parseAttribute(current, 'dateTimeUTC');\n    const date = DateTime.fromFormat(dateString, 'yyyyMMddHHmm', { zone: FixedOffsetZone.utcInstance });\n    return {\n      time: date.toSeconds(),\n      conditions: parseStringElement(getChild(current, 'condition')),\n      temperature: parseNumberElement(getChild(current, 'temperature')),\n      icon: conditionForId(parseNumberElement(getChild(current, 'iconCode'))),\n      windChill: parseNumberElement(getChild(current, 'windChill', true), true),\n      humidex: parseNumberElement(getChild(current, 'humidex', true), true),\n      pop: (parseNumberElement(getChild(current, 'lop', true), true) || 0) / 100\n    };\n  });\n}\n\nfunction parseWeather(xml: Document): WeatherReport {\n  const reportTimeNodes = xml.evaluate(\n    \"/siteData/dateTime[@name='xmlCreation' and @zone='UTC']\",\n    xml,\n    undefined,\n    XPathResult.FIRST_ORDERED_NODE_TYPE);\n  if (!(reportTimeNodes.singleNodeValue instanceof Element)) {\n    throw new ParseError(\"Missing creation time\");\n  }\n  return {\n    time: parseDate(reportTimeNodes.singleNodeValue).toSeconds(),\n    current: parseCurrentConditions(xml.getElementsByTagName('currentConditions')[0]),\n    forecasts: parseForecastGroup(xml.getElementsByTagName('forecastGroup')[0]),\n    hourlyForecasts: parseHourlyForecastGroup(xml.getElementsByTagName('hourlyForecastGroup')[0])\n  }\n}\n\n// Thunk functions\nexport const fetchWeather = createAsyncThunk('weather/fetchWeather', async () => {\n  const response = await axios('https://dashboard-proxy.jmreardon.com/api/weather/citypage_weather/xml/ON/s0000430_e.xml');\n  const xml = new DOMParser().parseFromString(response.data, \"text/xml\");\n  try {\n    return parseWeather(xml);\n  }\n  catch (e) {\n    if (e instanceof ParseError) {\n      return e.message;\n    }\n\n    throw (e);\n  }\n});\n\nconst weatherSlice = createSlice({\n  name: 'weather',\n  initialState,\n  reducers: {\n    loadWeather(state, action) {\n      return {\n        ...state,\n        isFetching: true\n      }\n    }\n  },\n  extraReducers: (builder) => {\n    builder\n      .addCase(fetchWeather.pending, (state, action) => {\n        state.state = \"fetching\";\n      })\n      .addCase(fetchWeather.fulfilled, (state, action) => {\n        state.state = \"fetched\";\n\n        if (typeof (action.payload) === \"string\") {\n          state.state = { error: action.payload };\n        } else {\n          state.state = \"fetched\";\n          state.data = action.payload;\n        }\n      })\n      .addCase(fetchWeather.rejected, (state, action) => {\n        state.state = { error: action.error.message || \"Unexpected error\" };\n      })\n  }\n})\n\nexport const { loadWeather } = weatherSlice.actions\n\nexport default weatherSlice","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux'\nimport type { RootState, AppDispatch } from './Store'\n\n// Use throughout your app instead of plain `useDispatch` and `useSelector`\nexport const useAppDispatch = () => useDispatch<AppDispatch>()\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector","import { Position, Toaster } from \"@blueprintjs/core\";\n\nexport const AppToasts = Toaster.create({\n  className: \"recipe-toaster\",\n  position: Position.BOTTOM,\n});","import { Alignment, Button, Icon, Navbar } from \"@blueprintjs/core\";\nimport { DateTime } from \"luxon\";\nimport React, { useEffect, useState } from \"react\";\nimport { fetchWeather } from \"../features/weather/WeatherSlice\";\nimport { useAppDispatch, useAppSelector } from \"../model/Hooks\";\nimport { AppToasts } from \"./AppToasts\";\n\nexport function Header() {\n  return (\n    <Navbar>\n      <Navbar.Group align={Alignment.LEFT}>\n        <Navbar.Heading>JR's Dashboard</Navbar.Heading>\n      </Navbar.Group>\n      <Navbar.Group align={Alignment.RIGHT}>\n        <LoadingIndicator />\n        <LoadingButton />\n      </Navbar.Group>\n    </Navbar>\n  )\n}\n\nfunction updateRelativeTime(update: (a: string) => void, time: number | undefined) {\n  return update(time ? 'As of ' + DateTime.fromSeconds(time).toRelative() : '');\n}\n\nfunction LoadingIndicator() {\n  const dispatcher = useAppDispatch();\n  const forecastTime = useAppSelector(state => state.forecast.data?.time);\n  const [relativeUpdateTime, setRelativeUpdateTime] = useState('');\n  const [lastUpdate, setLastUpdate] = useState(DateTime.now().toUTC());\n\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      updateRelativeTime(setRelativeUpdateTime, forecastTime);\n\n      if (lastUpdate.diffNow('minutes').minutes < -15) {\n        setLastUpdate(DateTime.now().toUTC());\n        dispatcher(fetchWeather());\n      }\n\n    }, 1000);\n    return () => clearInterval(interval);\n  });\n\n  useEffect(() => {\n    updateRelativeTime(setRelativeUpdateTime, forecastTime);\n  }, [setRelativeUpdateTime, forecastTime])\n\n  return <div>{relativeUpdateTime}</div>\n}\n\n\nfunction LoadingButton() {\n  const dispatcher = useAppDispatch();\n  const forecastState = useAppSelector(state => state.forecast.state);\n\n  useEffect(() => {\n    if (typeof (forecastState) === 'object') {\n      const message = <div>\n        <b>Failed to Load Forecast</b><br />\n        {forecastState.error}\n      </div >\n      AppToasts.show({ message, icon: 'error', intent: 'warning', })\n    }\n  }, [forecastState])\n\n  let indicator;\n  if (typeof (forecastState) === 'string') {\n    indicator = <Icon icon='refresh' />;\n  } else {\n    indicator = <Icon icon='outdated' />;\n  }\n  return <Button\n    loading={forecastState === 'fetching'}\n    onClick={() => dispatcher(fetchWeather())}\n    intent={typeof (forecastState) === 'string' ? 'success' : 'warning'}\n  >\n    {indicator}\n  </Button>\n}","import { Card, Classes, Divider, H5, H6, Icon, Text } from \"@blueprintjs/core\";\nimport { Tooltip2, Classes as ToolTipClasses } from \"@blueprintjs/popover2\";\nimport { DateTime, FixedOffsetZone } from \"luxon\";\nimport React from \"react\";\nimport { getSunrise, getSunset } from \"sunrise-sunset-js\";\nimport { useAppSelector } from \"../../model/Hooks\";\nimport { Forecast, HourlyForecast } from \"./WeatherSlice\";\n\nexport function CurrentConditionsReport() {\n  const conditions = useAppSelector(state => state.forecast.data?.current);\n\n  return (\n    <Card>\n      <div className=\"report-line\">\n        <div>\n          <H5>Current Weather\n          <span className={[Classes.TEXT_MUTED, Classes.TEXT_SMALL, Classes.UI_TEXT].join(' ')}>\n              {conditions\n                ? <> as of {DateTime.fromSeconds(conditions.time).toLocal().toLocaleString(DateTime.TIME_24_SIMPLE)}</>\n                : <> unavailable</>}\n            </span>\n          </H5>\n          <div className='overflow-container'><Text ellipsize={true}>{conditions?.conditions}</Text></div>\n        </div>\n        {conditions\n          ? <>\n            <div className='spacer' />\n            {renderTemperature(conditions.temperature, conditions.humidex, conditions.windChill)}\n            <div className='weather-icon'><i className={'wi-fw ' + (conditions.icon || 'wi wi-na')} /></div>\n          </>\n          : <></>\n        }\n      </div>\n      <AstronomicalReport />\n    </Card>\n  )\n}\n\nexport function DailyForecasts() {\n  const forecasts = useAppSelector(state => state.forecast.data?.forecasts);\n  const elements = forecasts?.flatMap(renderForecast) ?? <div className={Classes.TEXT_MUTED}>unavailable</div>;\n  return <Card>\n    <H5>Forecast</H5>\n    {elements}\n  </Card>\n}\n\nexport function HourlyForecasts() {\n  const forecasts = useAppSelector(state => state.forecast.data?.hourlyForecasts);\n  const elements = forecasts?.map(renderHourlyForecast) ?? <div className={Classes.TEXT_MUTED}>unavailable</div>;\n  return <Card>\n    <H5>Hourly Forecast</H5>\n    <div className='daily-forecasts'>\n      {elements}\n    </div>\n  </Card>\n}\n\nfunction renderTemperature(temp: number, humidex: number | null, windChill: number | null) {\n  const modifiedTemp = humidex || windChill;\n  if (modifiedTemp) {\n    return <div className='temperature'>\n      {`${modifiedTemp.toFixed(0)}\\u00b0C`} <span className={Classes.TEXT_MUTED}>{`(${temp.toFixed(0)}\\u00b0C)`}</span>\n    </div>\n  } else {\n    return <div className='temperature'>{`${temp.toFixed(0)}\\u00b0C`}</div>\n  }\n}\n\nfunction renderForecast(forecast: Forecast) {\n  const report = <div className=\"report-line forecast\" key={forecast.title}>\n    <div>\n      <H6>{forecast.title}</H6>\n      <Tooltip2 content={forecast.fullReport} position='top' className={ToolTipClasses.TOOLTIP2_INDICATOR}>\n        <Text ellipsize={true}>{forecast.conditions}</Text>\n      </Tooltip2>\n    </div>\n    <div className='spacer' />\n    {renderTemperature(forecast.temperature, forecast.humidex, forecast.windChill)}\n    <div className='weather-icon'><i className={'wi-fw ' + (forecast.icon || 'wi wi-na')} /></div>\n  </div>\n\n  if (forecast.title.endsWith('night')) {\n    return [report, <Divider key={forecast.title + \"-divider\"} />]\n  }\n\n  return [report]\n}\n\n\nfunction renderHourlyForecast(forecast: HourlyForecast) {\n  const time = DateTime.fromSeconds(forecast.time, { zone: FixedOffsetZone.utcInstance }).toLocal();\n  const date = time.day === DateTime.now().day ? 'today' : 'tomorrow';\n  return <div className={['report-line', 'forecast', date].join(' ')} key={forecast.time}>\n    <div className='time-title'>\n      <H6 className={warningClass(forecast)}>{to24hTime(time)}</H6>\n    </div>\n    <div><i className={'wi-fw ' + (forecast.icon || 'wi wi-na')} /></div>\n    <div className='temperature'>{`${(forecast.humidex || forecast.windChill || forecast.temperature).toFixed(0)}\\u00b0C`}\n      {(forecast.humidex || forecast.windChill)\n        ? <span className='temperature'>{`${forecast.temperature.toFixed(0)}\\u00b0C`}</span>\n        : <></>\n      }\n    </div>\n    <div>\n      {forecast.pop > 0 ? forecast.pop.toLocaleString(undefined, { style: 'percent' }) : ''}\n    </div>\n    <Text ellipsize={true}>\n      <Tooltip2 content={forecast.conditions} position='top' className={ToolTipClasses.TOOLTIP2_INDICATOR}>\n        {forecast.conditions}\n      </Tooltip2>\n    </Text>\n    <div className='spacer' />\n  </div >\n}\n\nfunction AstronomicalReport() {\n  const today = new Date();\n  return <div className='report-line'>\n    <H5>Sunrise/Sunset</H5>\n    <div className='spacer' />\n    <div>\n      <i className={'wi wi-sunrise'} /> {to24hTime(DateTime.fromJSDate(getSunrise(45.33, -75.58, today)))}\n    </div>\n    <div>\n      <i className={'wi wi-sunset'} /> {to24hTime(DateTime.fromJSDate(getSunset(45.33, -75.58, today)))}\n    </div>\n  </div>\n}\n\nfunction to24hTime(time: DateTime) {\n  return time.toLocal().toLocaleString(DateTime.TIME_24_SIMPLE);\n}\n\nfunction warningClass(forecast: HourlyForecast) {\n  if (forecast.pop >= 0.5) {\n    return 'warning'\n  }\n\n  return ''\n}\n","import { Classes, Divider } from \"@blueprintjs/core\"\nimport * as React from \"react\"\nimport { useModeSelector } from \"use-light-switch\"\nimport { Header } from \"./components/Header\";\nimport { CurrentConditionsReport, DailyForecasts, HourlyForecasts } from \"./features/weather/Components\";\n\nimport './App.scss';\n\nexport const App = () => {\n  const mode = useModeSelector({ dark: Classes.DARK, light: \"\", unset: \"\" });\n  return (\n    <div className={mode} id=\"layout-root\">\n      < Header />\n      <div>\n        <div className='card-grid'>\n          <CurrentConditionsReport />\n          <HourlyForecasts />\n          <DailyForecasts />\n        </div>\n      </div>\n      <Divider />\n      <footer className={Classes.TEXT_MUTED}>\n        Contains information licenced under the Data Server End-use Licence of Environment and Climate Change Canada.\n      </footer>\n    </div >\n  )\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n)\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void\n  onUpdate?: (registration: ServiceWorkerRegistration) => void\n}\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://cra.link/PWA\",\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://cra.link/PWA.\",\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It is the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\")\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\")\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\",\n      )\n    })\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister()\n      })\n      .catch((error) => {\n        console.error(error.message)\n      })\n  }\n}\n","import { configureStore } from '@reduxjs/toolkit'\nimport Weather from '../features/weather/WeatherSlice'\n\nexport const store = configureStore({\n  reducer: {\n    forecast: Weather.reducer\n  }\n})\n\n// Infer the `RootState` and `AppDispatch` types from the store itself\nexport type RootState = ReturnType<typeof store.getState>\n// Inferred type: {posts: PostsState, comments: CommentsState, users: UsersState}\nexport type AppDispatch = typeof store.dispatch","import * as React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport { App } from \"./App\"\nimport * as serviceWorker from \"./serviceWorker\"\n\nimport { store } from './model/Store'\nimport { Provider } from \"react-redux\"\nimport { fetchWeather } from \"./features/weather/WeatherSlice\"\n\nimport \"normalize.css/normalize.css\";\nimport \"@blueprintjs/icons/lib/css/blueprint-icons.css\";\nimport \"@blueprintjs/core/lib/css/blueprint.css\";\nimport \"@blueprintjs/popover2/lib/css/blueprint-popover2.css\";\n\n\nstore.dispatch(fetchWeather())\nsetInterval(() => store.dispatch(fetchWeather()), 1000 * 60 * 60)\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\"),\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}